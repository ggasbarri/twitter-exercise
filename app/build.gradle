apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "me.gincos.rhoexercise"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    // Core Android Dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    // Architecture components

    def lifecycle_version = "2.1.0"
    // ViewModel
    // Architecture Component for the implementation of MVVM
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // Koin
    // A simple Dependency Injection framework to structure the app's deps
    implementation 'org.koin:koin-android:1.0.1'
    implementation 'org.koin:koin-android-scope:1.0.1'
    implementation 'org.koin:koin-android-viewmodel:1.0.1'

    // Retrofit & Moshi
    // We use Retrofit to handle the Network layer and make the HTTP
    // requests to the Twitter API
    // Moshi provides the JSON serialization for the responses
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.moshi:moshi:1.9.2'
    implementation 'com.squareup.moshi:moshi-kotlin:1.9.2'
    implementation 'com.squareup.retrofit2:converter-moshi:2.6.2'
    implementation("com.squareup.okhttp3:logging-interceptor:4.2.1")
    implementation 'se.akerfeldt:okhttp-signpost:1.1.0'
    implementation 'oauth.signpost:signpost-core:1.2.1.2'

    // RxJava
    // Will handle processing the Stream from the API
    implementation "io.reactivex.rxjava2:rxjava:2.2.16"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.0'

    // Reactive Network
    // Allows to easily handle Network Changes leveraging RxJava
    implementation 'com.github.pwittchen:reactivenetwork-rx2:3.0.6'
}
